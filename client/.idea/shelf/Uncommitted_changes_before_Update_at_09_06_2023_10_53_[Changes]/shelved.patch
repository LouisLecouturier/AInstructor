Index: ../server/AInstructor/group/api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from ninja import Router\nfrom app.models import CustomUser\nfrom app.models import Groupe\nimport json\nfrom django.http import JsonResponse\n\nrouter = Router(tags=[\"Groups\"])\n\n\n\n\n@router.post('/', auth=None)\ndef main(request): \n    request = json.loads(request.body.decode('utf-8'))\n    print(request['id'])\n\n    user = CustomUser.objects.get(id = request['id'])\n    teams = user.team_set.all()\n    team_data = [{'teamUUID': team.uuid, 'name': team.name, 'color': team.color} for team in teams]\n\n    return JsonResponse({'teams' : team_data})\n\n\n\n\n@router.post('/overview')\ndef overview(request):\n    request = json.loads(request.body.decode('utf-8'))\n    print(request['teamUUID'])\n\n    team = Groupe.objects.get(uuid = request['teamUUID'])\n    users = team.users.all()\n    users_data = [\n        {\n            'first_name': user.first_name,\n            'email': user.email, \n            'last_name': user.last_name, \n            'is_teacher': user.is_teacher\n        } \n        for user in users\n    ]\n\n    return JsonResponse(\n        {\n            'name' : team.name,\n            'users' : users_data\n        }\n    )\n\n\n\n\n@router.post('/removeUser')\ndef removeUser(request):\n    request = json.loads(request.body.decode('utf-8'))\n    print(request)\n    error = False\n\n    try :\n        team = Groupe.objects.get(uuid = request['modelPrimaryKey'])\n        user = CustomUser.objects.get(first_name=request['modelFieldLine']['first_name'], last_name=request['modelFieldLine']['last_name'], email=request['modelFieldLine']['email'], is_teacher=request['modelFieldLine']['is_teacher'])\n        team.users.remove(user)\n    except :\n        \n\n        error = True\n\n    return JsonResponse({'error' : error})\n\n\n\n\n\n@router.post('/addUser')\ndef addUser(request):\n    request = json.loads(request.body.decode('utf-8'))\n    print(request)\n    error = False\n\n    try :\n        team = Groupe.objects.get(uuid = request['modelPrimaryKey'])\n        user = CustomUser.objects.get(email=request['PrimaryKeyElementAdd'])\n        team.users.add(user)\n    except :\n        error = True\n\n    return JsonResponse({'error' : error})\n\n\n@router.post('/new')\ndef new(request):\n    request = json.loads(request.body.decode('utf-8'))\n    print(request)\n    error = False\n\n    try :\n        team = Groupe.objects.create(name = request['name'], color = request['color'])\n        user = CustomUser.objects.get(id = request['userID'])\n        team.users.add(user)\n    except :\n        error = True\n    \n    return JsonResponse({'error' : error})
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../server/AInstructor/group/api.py b/../server/AInstructor/group/api.py
--- a/../server/AInstructor/group/api.py	
+++ b/../server/AInstructor/group/api.py	
@@ -7,84 +7,77 @@
 router = Router(tags=["Groups"])
 
 
-
-
 @router.post('/', auth=None)
-def main(request): 
+def main(request):
     request = json.loads(request.body.decode('utf-8'))
     print(request['id'])
 
-    user = CustomUser.objects.get(id = request['id'])
+    user = CustomUser.objects.get(id=request['id'])
     teams = user.team_set.all()
     team_data = [{'teamUUID': team.uuid, 'name': team.name, 'color': team.color} for team in teams]
 
-    return JsonResponse({'teams' : team_data})
+    return JsonResponse({'teams': team_data})
 
 
-
-
 @router.post('/overview')
 def overview(request):
     request = json.loads(request.body.decode('utf-8'))
     print(request['teamUUID'])
 
-    team = Groupe.objects.get(uuid = request['teamUUID'])
+    team = Groupe.objects.get(uuid=request['teamUUID'])
     users = team.users.all()
     users_data = [
         {
             'first_name': user.first_name,
-            'email': user.email, 
-            'last_name': user.last_name, 
+            'email': user.email,
+            'last_name': user.last_name,
             'is_teacher': user.is_teacher
-        } 
+        }
         for user in users
     ]
 
     return JsonResponse(
         {
-            'name' : team.name,
-            'users' : users_data
+            'name': team.name,
+            'users': users_data
         }
     )
 
 
-
-
 @router.post('/removeUser')
 def removeUser(request):
     request = json.loads(request.body.decode('utf-8'))
     print(request)
     error = False
 
-    try :
-        team = Groupe.objects.get(uuid = request['modelPrimaryKey'])
-        user = CustomUser.objects.get(first_name=request['modelFieldLine']['first_name'], last_name=request['modelFieldLine']['last_name'], email=request['modelFieldLine']['email'], is_teacher=request['modelFieldLine']['is_teacher'])
+    try:
+        team = Groupe.objects.get(uuid=request['modelPrimaryKey'])
+        user = CustomUser.objects.get(first_name=request['modelFieldLine']['first_name'],
+                                      last_name=request['modelFieldLine']['last_name'],
+                                      email=request['modelFieldLine']['email'],
+                                      is_teacher=request['modelFieldLine']['is_teacher'])
         team.users.remove(user)
-    except :
-        
+    except:
 
         error = True
 
-    return JsonResponse({'error' : error})
+    return JsonResponse({'error': error})
 
 
-
-
-
 @router.post('/addUser')
 def addUser(request):
     request = json.loads(request.body.decode('utf-8'))
     print(request)
     error = False
 
-    try :
-        team = Groupe.objects.get(uuid = request['modelPrimaryKey'])
+    try:
+        team = Groupe.objects.get(uuid=request['modelPrimaryKey'])
         user = CustomUser.objects.get(email=request['PrimaryKeyElementAdd'])
         team.users.add(user)
-    except :
+    except:
         error = True
 
-    return JsonResponse({'error' : error})
+    return JsonResponse({'error': error})
 
 
 @router.post('/new')
@@ -93,11 +86,11 @@
     print(request)
     error = False
 
-    try :
-        team = Groupe.objects.create(name = request['name'], color = request['color'])
-        user = CustomUser.objects.get(id = request['userID'])
+    try:
+        team = Groupe.objects.create(name=request['name'], color=request['color'])
+        user = CustomUser.objects.get(id=request['userID'])
         team.users.add(user)
-    except :
+    except:
         error = True
-    
-    return JsonResponse({'error' : error})
\ No newline at end of file
+
+    return JsonResponse({'error': error})
Index: ../server/AInstructor/user/api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from ninja import Router, Schema, File, UploadedFile, Field\nfrom ninja.files import UploadedFile\nimport uuid, os,json\nfrom django.shortcuts import get_object_or_404\nfrom app import models\nfrom pydantic import BaseModel\nfrom datetime import date\nfrom typing import List\nfrom user import user_requirements\nfrom django.core.serializers.json import DjangoJSONEncoder\nrouter = Router(tags=[\"User\"])\n\n\"\"\"__________________________________________________________request conserning the users_______________________________________________________\"\"\"\n\n\n\n@router.get(\"/users\", )\ndef list_users(request):\n    \"\"\"get the list of all users -> debug only pcq pas safe\"\"\"\n    users = models.CustomUser.objects.all()\n    print(users)\n    user_list = []\n    for user in users:\n        user_info = {\n            'id': user.id,\n            'username': user.username,\n            'email': user.email,\n            'first_name': user.first_name,\n            'last_name': user.last_name,\n            'is_teacher': user.is_teacher,\n            'last_connexion': user.last_connexion,\n            'profile picture' : str(user.profil_picture.url) if user.profil_picture else None,\n            'jwt': {'acces tokenn' :user.jwt_access, 'refresh token': user.jwt_refresh}\n        }\n        user_list.append(user_info)\n    return {'users': user_list}\n\n\n\n@router.get(\"/user\", )\ndef get_user_by_username(request, username: str):\n    user = get_object_or_404(models.CustomUser, username=username)\n    return {'id': user.id, 'username': user.username, 'email': user.email, 'first_name': user.first_name, 'last_name': user.last_name, 'is_teacher': user.is_teacher, 'last_connexion': user.last_connexion, 'profile picture' : str(user.profil_picture.url) if user.profil_picture else None}\n\n\n\nclass CustomUserEncoder(DjangoJSONEncoder):\n    def default(self, o):\n        if isinstance(o, models.CustomUser):\n            return str(o)  \n        return super().default(o)\n    \n\n@router.get(\"/users/{user_id}\", )\ndef get_users_by_id(request, user_id: int):\n    user = get_object_or_404(models.CustomUser, id = user_id) \n    courses_list = []\n    try:\n        courses = models.Course.objects.filter(uploaded_by = user)\n        for course in courses:\n            courses_list.append( {\n                'id': course.course_id,\n                'title': course.name,\n                'theme': course.theme,\n                'uploaded_by': course.uploaded_by,\n            })\n    except:\n        courses = None\n    questionnaires_list = []\n    try:\n        questionnaires = models.Questionnaire.objects.filter(uploaded_by = user)\n        for questionnaire in questionnaires:\n            questionnaires_list.append( {\n                'id': questionnaire.questionnaire_id,\n                'title': questionnaire.title,\n                'theme': questionnaire.theme,\n                'uploaded_by': questionnaire.uploaded_by,\n                'description': questionnaire.description,\n                'difficulty': questionnaire.difficulty,\n                'date_end': questionnaire.date_end,\n                'date_creation': questionnaire.date_creation,\n            })\n    except:\n        questionnaires = None\n    response = {\n        'id': user.id,\n        'username': user.username,\n        'email': user.email,\n        'first_name': user.first_name,\n        'last_name': user.last_name,\n        'is_teacher': user.is_teacher,\n        'last_connexion': user.last_connexion,\n        'profile picture' : str(user.profil_picture.url) if user.profil_picture else None,\n        'courses': courses_list,\n        'questionnaires': questionnaires_list,\n    }\n    response = json.dumps(response, cls=CustomUserEncoder, separators=(',', ':'))\n    #remove the backslash\n    print(response)  \n    #response = response.replace('\\\\', '')\n    return response\n\n\n\n\n\n\n\n\nclass CreateUser(Schema):\n    username: str = Field(...)\n    password: str = Field(...)\n    email: str = Field(...)\n    first_name: str = Field(...)\n    last_name: str = Field(...)\n    is_teacher: bool = Field(...)\n    \n@router.post(\"/user/create\", )\ndef create_user(request,body : CreateUser, file: UploadedFile = File(...)):\n    \"\"\"create a new user\"\"\"\n    if  not user_requirements.validate_mail(body.email):\n        return {'error': 'mail is not valid or already used !'}\n    elif not user_requirements.validate_username(body.username):\n        return {'error': 'username is not valid or already used !'}\n    # elif not user_requirements.validate_password_strength(body.password):\n    #     return {'error': 'password is not strong enougth! use at least 8 characters, 1 uppercase, 1 lowercase, 1 number and 1 special character'}\n    else:\n        user = models.CustomUser.objects.create_user(username=body.username, password=body.password, email=body.email, first_name=body.first_name, last_name=body.last_name, is_teacher=body.is_teacher, profil_picture=file)\n        return {'message': \"succesfully created the user :\" + user.username, 'id' : 'user.id'}\n\nclass UpdateUser(Schema):\n    username: str = Field(...)\n    email: str = Field(...)\n    first_name: str = Field(...)\n    last_name: str = Field(...)\n    password: str = Field(...)\n\n@router.put(\"/Update/{user_id}\", )\ndef update_user(request, body : UpdateUser, user_id: int):\n    user = get_object_or_404(models.CustomUser, id=user_id)\n   \n    if user_requirements.validate_username(body.username) == False:\n        return {'error': 'Username already exists'}\n    if user_requirements.validate_password_strength(body.password) == False:\n        return {'error': 'password is not strong enough'}\n    if user_requirements.validate_not_empty(body.username) == False:\n        return {'error': 'username is too short'}\n    if user_requirements.validate_mail(body.email) and user_requirements.validate_not_empty(body.username) == False:\n        return {'error': 'email is not a valid format or already used'}\n    user.username = body.username\n    user.email = body.email\n    user.password = body.password\n    user.first_name = body.first_name\n    user.last_name = body.last_name\n    user.save()\n    return {'message': user.username +\" updated\"}\n\n\n\n@router.delete(\"/user/{user_id}\", )\ndef delete_user(request, user_id: int):\n    user = get_object_or_404(models.CustomUser, id=user_id)\n    user.delete()\n    return {'status': 'ok', 'message': 'user'+ user.username+'deleted'}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../server/AInstructor/user/api.py b/../server/AInstructor/user/api.py
--- a/../server/AInstructor/user/api.py	
+++ b/../server/AInstructor/user/api.py	
@@ -1,6 +1,6 @@
 from ninja import Router, Schema, File, UploadedFile, Field
 from ninja.files import UploadedFile
-import uuid, os,json
+import uuid, os, json
 from django.shortcuts import get_object_or_404
 from app import models
 from pydantic import BaseModel
@@ -8,12 +8,12 @@
 from typing import List
 from user import user_requirements
 from django.core.serializers.json import DjangoJSONEncoder
+
 router = Router(tags=["User"])
 
 """__________________________________________________________request conserning the users_______________________________________________________"""
 
 
-
 @router.get("/users", )
 def list_users(request):
     """get the list of all users -> debug only pcq pas safe"""
@@ -29,36 +29,36 @@
             'last_name': user.last_name,
             'is_teacher': user.is_teacher,
             'last_connexion': user.last_connexion,
-            'profile picture' : str(user.profil_picture.url) if user.profil_picture else None,
-            'jwt': {'acces tokenn' :user.jwt_access, 'refresh token': user.jwt_refresh}
+            'profile picture': str(user.profil_picture.url) if user.profil_picture else None,
+            'jwt': {'acces token': user.jwt_access, 'refresh token': user.jwt_refresh}
         }
         user_list.append(user_info)
     return {'users': user_list}
 
 
-
 @router.get("/user", )
 def get_user_by_username(request, username: str):
     user = get_object_or_404(models.CustomUser, username=username)
-    return {'id': user.id, 'username': user.username, 'email': user.email, 'first_name': user.first_name, 'last_name': user.last_name, 'is_teacher': user.is_teacher, 'last_connexion': user.last_connexion, 'profile picture' : str(user.profil_picture.url) if user.profil_picture else None}
-
+    return {'id': user.id, 'username': user.username, 'email': user.email, 'first_name': user.first_name,
+            'last_name': user.last_name, 'is_teacher': user.is_teacher, 'last_connexion': user.last_connexion,
+            'profile picture': str(user.profil_picture.url) if user.profil_picture else None}
 
 
 class CustomUserEncoder(DjangoJSONEncoder):
     def default(self, o):
         if isinstance(o, models.CustomUser):
-            return str(o)  
+            return str(o)
         return super().default(o)
-    
+
 
 @router.get("/users/{user_id}", )
 def get_users_by_id(request, user_id: int):
-    user = get_object_or_404(models.CustomUser, id = user_id) 
+    user = get_object_or_404(models.CustomUser, id=user_id)
     courses_list = []
     try:
-        courses = models.Course.objects.filter(uploaded_by = user)
+        courses = models.Course.objects.filter(uploaded_by=user)
         for course in courses:
-            courses_list.append( {
+            courses_list.append({
                 'id': course.course_id,
                 'title': course.name,
                 'theme': course.theme,
@@ -68,9 +68,9 @@
         courses = None
     questionnaires_list = []
     try:
-        questionnaires = models.Questionnaire.objects.filter(uploaded_by = user)
+        questionnaires = models.Questionnaire.objects.filter(uploaded_by=user)
         for questionnaire in questionnaires:
-            questionnaires_list.append( {
+            questionnaires_list.append({
                 'id': questionnaire.questionnaire_id,
                 'title': questionnaire.title,
                 'theme': questionnaire.theme,
@@ -90,23 +90,17 @@
         'last_name': user.last_name,
         'is_teacher': user.is_teacher,
         'last_connexion': user.last_connexion,
-        'profile picture' : str(user.profil_picture.url) if user.profil_picture else None,
+        'profile picture': str(user.profil_picture.url) if user.profil_picture else None,
         'courses': courses_list,
         'questionnaires': questionnaires_list,
     }
     response = json.dumps(response, cls=CustomUserEncoder, separators=(',', ':'))
-    #remove the backslash
-    print(response)  
-    #response = response.replace('\\', '')
+    # remove the backslash
+    print(response)
+    # response = response.replace('\\', '')
     return response
 
 
-
-
-
-
-
-
 class CreateUser(Schema):
     username: str = Field(...)
     password: str = Field(...)
@@ -114,20 +108,24 @@
     first_name: str = Field(...)
     last_name: str = Field(...)
     is_teacher: bool = Field(...)
-    
+
+
 @router.post("/user/create", )
-def create_user(request,body : CreateUser, file: UploadedFile = File(...)):
+def create_user(request, body: CreateUser, file: UploadedFile = File(...)):
     """create a new user"""
-    if  not user_requirements.validate_mail(body.email):
+    if not user_requirements.validate_mail(body.email):
         return {'error': 'mail is not valid or already used !'}
     elif not user_requirements.validate_username(body.username):
         return {'error': 'username is not valid or already used !'}
     # elif not user_requirements.validate_password_strength(body.password):
     #     return {'error': 'password is not strong enougth! use at least 8 characters, 1 uppercase, 1 lowercase, 1 number and 1 special character'}
     else:
-        user = models.CustomUser.objects.create_user(username=body.username, password=body.password, email=body.email, first_name=body.first_name, last_name=body.last_name, is_teacher=body.is_teacher, profil_picture=file)
-        return {'message': "succesfully created the user :" + user.username, 'id' : 'user.id'}
+        user = models.CustomUser.objects.create_user(username=body.username, password=body.password, email=body.email,
+                                                     first_name=body.first_name, last_name=body.last_name,
+                                                     is_teacher=body.is_teacher, profil_picture=file)
+        return {'message': "succesfully created the user :" + user.username, 'id': 'user.id'}
 
+
 class UpdateUser(Schema):
     username: str = Field(...)
     email: str = Field(...)
@@ -135,10 +133,11 @@
     last_name: str = Field(...)
     password: str = Field(...)
 
+
 @router.put("/Update/{user_id}", )
-def update_user(request, body : UpdateUser, user_id: int):
+def update_user(request, body: UpdateUser, user_id: int):
     user = get_object_or_404(models.CustomUser, id=user_id)
-   
+
     if user_requirements.validate_username(body.username) == False:
         return {'error': 'Username already exists'}
     if user_requirements.validate_password_strength(body.password) == False:
@@ -153,12 +152,11 @@
     user.first_name = body.first_name
     user.last_name = body.last_name
     user.save()
-    return {'message': user.username +" updated"}
+    return {'message': user.username + " updated"}
 
 
-
 @router.delete("/user/{user_id}", )
 def delete_user(request, user_id: int):
     user = get_object_or_404(models.CustomUser, id=user_id)
     user.delete()
-    return {'status': 'ok', 'message': 'user'+ user.username+'deleted'}
+    return {'status': 'ok', 'message': 'user' + user.username + 'deleted'}
Index: ../server/Pipfile.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    \"_meta\": {\n        \"hash\": {\n\n            \"sha256\": \"2c0fbc506de9ab6bf2a4e5841ca150b3a6d01ae6463e12ac9ebd31fbd9cf9a0c\"\n\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.11\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"anyio\": {\n            \"hashes\": [\n                \"sha256:275d9973793619a5374e1c89a4f4ad3f4b0a5510a2b5b939444bee8f4c4d37ce\",\n                \"sha256:eddca883c4175f14df8aedce21054bfca3adb70ffe76a9f607aef9d7fa2ea7f0\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.7.0\"\n        },\n        \"asgiref\": {\n            \"hashes\": [\n                \"sha256:89b2ef2247e3b562a16eef663bc0e2e703ec6468e2fa8a5cd61cd449786d4f6e\",\n                \"sha256:9e0ce3aa93a819ba5b45120216b23878cf6e8525eb3848653452b4192b92afed\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.7.2\"\n        },\n        \"cffi\": {\n            \"hashes\": [\n                \"sha256:00a9ed42e88df81ffae7a8ab6d9356b371399b91dbdf0c3cb1e84c03a13aceb5\",\n                \"sha256:03425bdae262c76aad70202debd780501fabeaca237cdfddc008987c0e0f59ef\",\n                \"sha256:04ed324bda3cda42b9b695d51bb7d54b680b9719cfab04227cdd1e04e5de3104\",\n                \"sha256:0e2642fe3142e4cc4af0799748233ad6da94c62a8bec3a6648bf8ee68b1c7426\",\n                \"sha256:173379135477dc8cac4bc58f45db08ab45d228b3363adb7af79436135d028405\",\n                \"sha256:198caafb44239b60e252492445da556afafc7d1e3ab7a1fb3f0584ef6d742375\",\n                \"sha256:1e74c6b51a9ed6589199c787bf5f9875612ca4a8a0785fb2d4a84429badaf22a\",\n                \"sha256:2012c72d854c2d03e45d06ae57f40d78e5770d252f195b93f581acf3ba44496e\",\n                \"sha256:21157295583fe8943475029ed5abdcf71eb3911894724e360acff1d61c1d54bc\",\n                \"sha256:2470043b93ff09bf8fb1d46d1cb756ce6132c54826661a32d4e4d132e1977adf\",\n                \"sha256:285d29981935eb726a4399badae8f0ffdff4f5050eaa6d0cfc3f64b857b77185\",\n                \"sha256:30d78fbc8ebf9c92c9b7823ee18eb92f2e6ef79b45ac84db507f52fbe3ec4497\",\n                \"sha256:320dab6e7cb2eacdf0e658569d2575c4dad258c0fcc794f46215e1e39f90f2c3\",\n                \"sha256:33ab79603146aace82c2427da5ca6e58f2b3f2fb5da893ceac0c42218a40be35\",\n                \"sha256:3548db281cd7d2561c9ad9984681c95f7b0e38881201e157833a2342c30d5e8c\",\n                \"sha256:3799aecf2e17cf585d977b780ce79ff0dc9b78d799fc694221ce814c2c19db83\",\n                \"sha256:39d39875251ca8f612b6f33e6b1195af86d1b3e60086068be9cc053aa4376e21\",\n                \"sha256:3b926aa83d1edb5aa5b427b4053dc420ec295a08e40911296b9eb1b6170f6cca\",\n                \"sha256:3bcde07039e586f91b45c88f8583ea7cf7a0770df3a1649627bf598332cb6984\",\n                \"sha256:3d08afd128ddaa624a48cf2b859afef385b720bb4b43df214f85616922e6a5ac\",\n                \"sha256:3eb6971dcff08619f8d91607cfc726518b6fa2a9eba42856be181c6d0d9515fd\",\n                \"sha256:40f4774f5a9d4f5e344f31a32b5096977b5d48560c5592e2f3d2c4374bd543ee\",\n                \"sha256:4289fc34b2f5316fbb762d75362931e351941fa95fa18789191b33fc4cf9504a\",\n                \"sha256:470c103ae716238bbe698d67ad020e1db9d9dba34fa5a899b5e21577e6d52ed2\",\n                \"sha256:4f2c9f67e9821cad2e5f480bc8d83b8742896f1242dba247911072d4fa94c192\",\n                \"sha256:50a74364d85fd319352182ef59c5c790484a336f6db772c1a9231f1c3ed0cbd7\",\n                \"sha256:54a2db7b78338edd780e7ef7f9f6c442500fb0d41a5a4ea24fff1c929d5af585\",\n                \"sha256:5635bd9cb9731e6d4a1132a498dd34f764034a8ce60cef4f5319c0541159392f\",\n                \"sha256:59c0b02d0a6c384d453fece7566d1c7e6b7bae4fc5874ef2ef46d56776d61c9e\",\n                \"sha256:5d598b938678ebf3c67377cdd45e09d431369c3b1a5b331058c338e201f12b27\",\n                \"sha256:5df2768244d19ab7f60546d0c7c63ce1581f7af8b5de3eb3004b9b6fc8a9f84b\",\n                \"sha256:5ef34d190326c3b1f822a5b7a45f6c4535e2f47ed06fec77d3d799c450b2651e\",\n                \"sha256:6975a3fac6bc83c4a65c9f9fcab9e47019a11d3d2cf7f3c0d03431bf145a941e\",\n                \"sha256:6c9a799e985904922a4d207a94eae35c78ebae90e128f0c4e521ce339396be9d\",\n                \"sha256:70df4e3b545a17496c9b3f41f5115e69a4f2e77e94e1d2a8e1070bc0c38c8a3c\",\n                \"sha256:7473e861101c9e72452f9bf8acb984947aa1661a7704553a9f6e4baa5ba64415\",\n                \"sha256:8102eaf27e1e448db915d08afa8b41d6c7ca7a04b7d73af6514df10a3e74bd82\",\n                \"sha256:87c450779d0914f2861b8526e035c5e6da0a3199d8f1add1a665e1cbc6fc6d02\",\n                \"sha256:8b7ee99e510d7b66cdb6c593f21c043c248537a32e0bedf02e01e9553a172314\",\n                \"sha256:91fc98adde3d7881af9b59ed0294046f3806221863722ba7d8d120c575314325\",\n                \"sha256:94411f22c3985acaec6f83c6df553f2dbe17b698cc7f8ae751ff2237d96b9e3c\",\n                \"sha256:98d85c6a2bef81588d9227dde12db8a7f47f639f4a17c9ae08e773aa9c697bf3\",\n                \"sha256:9ad5db27f9cabae298d151c85cf2bad1d359a1b9c686a275df03385758e2f914\",\n                \"sha256:a0b71b1b8fbf2b96e41c4d990244165e2c9be83d54962a9a1d118fd8657d2045\",\n                \"sha256:a0f100c8912c114ff53e1202d0078b425bee3649ae34d7b070e9697f93c5d52d\",\n                \"sha256:a591fe9e525846e4d154205572a029f653ada1a78b93697f3b5a8f1f2bc055b9\",\n                \"sha256:a5c84c68147988265e60416b57fc83425a78058853509c1b0629c180094904a5\",\n                \"sha256:a66d3508133af6e8548451b25058d5812812ec3798c886bf38ed24a98216fab2\",\n                \"sha256:a8c4917bd7ad33e8eb21e9a5bbba979b49d9a97acb3a803092cbc1133e20343c\",\n                \"sha256:b3bbeb01c2b273cca1e1e0c5df57f12dce9a4dd331b4fa1635b8bec26350bde3\",\n                \"sha256:cba9d6b9a7d64d4bd46167096fc9d2f835e25d7e4c121fb2ddfc6528fb0413b2\",\n                \"sha256:cc4d65aeeaa04136a12677d3dd0b1c0c94dc43abac5860ab33cceb42b801c1e8\",\n                \"sha256:ce4bcc037df4fc5e3d184794f27bdaab018943698f4ca31630bc7f84a7b69c6d\",\n                \"sha256:cec7d9412a9102bdc577382c3929b337320c4c4c4849f2c5cdd14d7368c5562d\",\n                \"sha256:d400bfb9a37b1351253cb402671cea7e89bdecc294e8016a707f6d1d8ac934f9\",\n                \"sha256:d61f4695e6c866a23a21acab0509af1cdfd2c013cf256bbf5b6b5e2695827162\",\n                \"sha256:db0fbb9c62743ce59a9ff687eb5f4afbe77e5e8403d6697f7446e5f609976f76\",\n                \"sha256:dd86c085fae2efd48ac91dd7ccffcfc0571387fe1193d33b6394db7ef31fe2a4\",\n                \"sha256:e00b098126fd45523dd056d2efba6c5a63b71ffe9f2bbe1a4fe1716e1d0c331e\",\n                \"sha256:e229a521186c75c8ad9490854fd8bbdd9a0c9aa3a524326b55be83b54d4e0ad9\",\n                \"sha256:e263d77ee3dd201c3a142934a086a4450861778baaeeb45db4591ef65550b0a6\",\n                \"sha256:ed9cb427ba5504c1dc15ede7d516b84757c3e3d7868ccc85121d9310d27eed0b\",\n                \"sha256:fa6693661a4c91757f4412306191b6dc88c1703f780c8234035eac011922bc01\",\n                \"sha256:fcd131dd944808b5bdb38e6f5b53013c5aa4f334c5cad0c72742f6eba4b73db0\"\n            ],\n            \"version\": \"==1.15.1\"\n        },\n        \"charset-normalizer\": {\n            \"hashes\": [\n                \"sha256:04afa6387e2b282cf78ff3dbce20f0cc071c12dc8f685bd40960cc68644cfea6\",\n                \"sha256:04eefcee095f58eaabe6dc3cc2262f3bcd776d2c67005880894f447b3f2cb9c1\",\n                \"sha256:0be65ccf618c1e7ac9b849c315cc2e8a8751d9cfdaa43027d4f6624bd587ab7e\",\n                \"sha256:0c95f12b74681e9ae127728f7e5409cbbef9cd914d5896ef238cc779b8152373\",\n                \"sha256:0ca564606d2caafb0abe6d1b5311c2649e8071eb241b2d64e75a0d0065107e62\",\n                \"sha256:10c93628d7497c81686e8e5e557aafa78f230cd9e77dd0c40032ef90c18f2230\",\n                \"sha256:11d117e6c63e8f495412d37e7dc2e2fff09c34b2d09dbe2bee3c6229577818be\",\n                \"sha256:11d3bcb7be35e7b1bba2c23beedac81ee893ac9871d0ba79effc7fc01167db6c\",\n                \"sha256:12a2b561af122e3d94cdb97fe6fb2bb2b82cef0cdca131646fdb940a1eda04f0\",\n                \"sha256:12d1a39aa6b8c6f6248bb54550efcc1c38ce0d8096a146638fd4738e42284448\",\n                \"sha256:1435ae15108b1cb6fffbcea2af3d468683b7afed0169ad718451f8db5d1aff6f\",\n                \"sha256:1c60b9c202d00052183c9be85e5eaf18a4ada0a47d188a83c8f5c5b23252f649\",\n                \"sha256:1e8fcdd8f672a1c4fc8d0bd3a2b576b152d2a349782d1eb0f6b8e52e9954731d\",\n                \"sha256:20064ead0717cf9a73a6d1e779b23d149b53daf971169289ed2ed43a71e8d3b0\",\n                \"sha256:21fa558996782fc226b529fdd2ed7866c2c6ec91cee82735c98a197fae39f706\",\n                \"sha256:22908891a380d50738e1f978667536f6c6b526a2064156203d418f4856d6e86a\",\n                \"sha256:3160a0fd9754aab7d47f95a6b63ab355388d890163eb03b2d2b87ab0a30cfa59\",\n                \"sha256:322102cdf1ab682ecc7d9b1c5eed4ec59657a65e1c146a0da342b78f4112db23\",\n                \"sha256:34e0a2f9c370eb95597aae63bf85eb5e96826d81e3dcf88b8886012906f509b5\",\n                \"sha256:3573d376454d956553c356df45bb824262c397c6e26ce43e8203c4c540ee0acb\",\n                \"sha256:3747443b6a904001473370d7810aa19c3a180ccd52a7157aacc264a5ac79265e\",\n                \"sha256:38e812a197bf8e71a59fe55b757a84c1f946d0ac114acafaafaf21667a7e169e\",\n                \"sha256:3a06f32c9634a8705f4ca9946d667609f52cf130d5548881401f1eb2c39b1e2c\",\n                \"sha256:3a5fc78f9e3f501a1614a98f7c54d3969f3ad9bba8ba3d9b438c3bc5d047dd28\",\n                \"sha256:3d9098b479e78c85080c98e1e35ff40b4a31d8953102bb0fd7d1b6f8a2111a3d\",\n                \"sha256:3dc5b6a8ecfdc5748a7e429782598e4f17ef378e3e272eeb1340ea57c9109f41\",\n                \"sha256:4155b51ae05ed47199dc5b2a4e62abccb274cee6b01da5b895099b61b1982974\",\n                \"sha256:49919f8400b5e49e961f320c735388ee686a62327e773fa5b3ce6721f7e785ce\",\n                \"sha256:53d0a3fa5f8af98a1e261de6a3943ca631c526635eb5817a87a59d9a57ebf48f\",\n                \"sha256:5f008525e02908b20e04707a4f704cd286d94718f48bb33edddc7d7b584dddc1\",\n                \"sha256:628c985afb2c7d27a4800bfb609e03985aaecb42f955049957814e0491d4006d\",\n                \"sha256:65ed923f84a6844de5fd29726b888e58c62820e0769b76565480e1fdc3d062f8\",\n                \"sha256:6734e606355834f13445b6adc38b53c0fd45f1a56a9ba06c2058f86893ae8017\",\n                \"sha256:6baf0baf0d5d265fa7944feb9f7451cc316bfe30e8df1a61b1bb08577c554f31\",\n                \"sha256:6f4f4668e1831850ebcc2fd0b1cd11721947b6dc7c00bf1c6bd3c929ae14f2c7\",\n                \"sha256:6f5c2e7bc8a4bf7c426599765b1bd33217ec84023033672c1e9a8b35eaeaaaf8\",\n                \"sha256:6f6c7a8a57e9405cad7485f4c9d3172ae486cfef1344b5ddd8e5239582d7355e\",\n                \"sha256:7381c66e0561c5757ffe616af869b916c8b4e42b367ab29fedc98481d1e74e14\",\n                \"sha256:73dc03a6a7e30b7edc5b01b601e53e7fc924b04e1835e8e407c12c037e81adbd\",\n                \"sha256:74db0052d985cf37fa111828d0dd230776ac99c740e1a758ad99094be4f1803d\",\n                \"sha256:75f2568b4189dda1c567339b48cba4ac7384accb9c2a7ed655cd86b04055c795\",\n                \"sha256:78cacd03e79d009d95635e7d6ff12c21eb89b894c354bd2b2ed0b4763373693b\",\n                \"sha256:80d1543d58bd3d6c271b66abf454d437a438dff01c3e62fdbcd68f2a11310d4b\",\n                \"sha256:830d2948a5ec37c386d3170c483063798d7879037492540f10a475e3fd6f244b\",\n                \"sha256:891cf9b48776b5c61c700b55a598621fdb7b1e301a550365571e9624f270c203\",\n                \"sha256:8f25e17ab3039b05f762b0a55ae0b3632b2e073d9c8fc88e89aca31a6198e88f\",\n                \"sha256:9a3267620866c9d17b959a84dd0bd2d45719b817245e49371ead79ed4f710d19\",\n                \"sha256:a04f86f41a8916fe45ac5024ec477f41f886b3c435da2d4e3d2709b22ab02af1\",\n                \"sha256:aaf53a6cebad0eae578f062c7d462155eada9c172bd8c4d250b8c1d8eb7f916a\",\n                \"sha256:abc1185d79f47c0a7aaf7e2412a0eb2c03b724581139193d2d82b3ad8cbb00ac\",\n                \"sha256:ac0aa6cd53ab9a31d397f8303f92c42f534693528fafbdb997c82bae6e477ad9\",\n                \"sha256:ac3775e3311661d4adace3697a52ac0bab17edd166087d493b52d4f4f553f9f0\",\n                \"sha256:b06f0d3bf045158d2fb8837c5785fe9ff9b8c93358be64461a1089f5da983137\",\n                \"sha256:b116502087ce8a6b7a5f1814568ccbd0e9f6cfd99948aa59b0e241dc57cf739f\",\n                \"sha256:b82fab78e0b1329e183a65260581de4375f619167478dddab510c6c6fb04d9b6\",\n                \"sha256:bd7163182133c0c7701b25e604cf1611c0d87712e56e88e7ee5d72deab3e76b5\",\n                \"sha256:c36bcbc0d5174a80d6cccf43a0ecaca44e81d25be4b7f90f0ed7bcfbb5a00909\",\n                \"sha256:c3af8e0f07399d3176b179f2e2634c3ce9c1301379a6b8c9c9aeecd481da494f\",\n                \"sha256:c84132a54c750fda57729d1e2599bb598f5fa0344085dbde5003ba429a4798c0\",\n                \"sha256:cb7b2ab0188829593b9de646545175547a70d9a6e2b63bf2cd87a0a391599324\",\n                \"sha256:cca4def576f47a09a943666b8f829606bcb17e2bc2d5911a46c8f8da45f56755\",\n                \"sha256:cf6511efa4801b9b38dc5546d7547d5b5c6ef4b081c60b23e4d941d0eba9cbeb\",\n                \"sha256:d16fd5252f883eb074ca55cb622bc0bee49b979ae4e8639fff6ca3ff44f9f854\",\n                \"sha256:d2686f91611f9e17f4548dbf050e75b079bbc2a82be565832bc8ea9047b61c8c\",\n                \"sha256:d7fc3fca01da18fbabe4625d64bb612b533533ed10045a2ac3dd194bfa656b60\",\n                \"sha256:dd5653e67b149503c68c4018bf07e42eeed6b4e956b24c00ccdf93ac79cdff84\",\n                \"sha256:de5695a6f1d8340b12a5d6d4484290ee74d61e467c39ff03b39e30df62cf83a0\",\n                \"sha256:e0ac8959c929593fee38da1c2b64ee9778733cdf03c482c9ff1d508b6b593b2b\",\n                \"sha256:e1b25e3ad6c909f398df8921780d6a3d120d8c09466720226fc621605b6f92b1\",\n                \"sha256:e633940f28c1e913615fd624fcdd72fdba807bf53ea6925d6a588e84e1151531\",\n                \"sha256:e89df2958e5159b811af9ff0f92614dabf4ff617c03a4c1c6ff53bf1c399e0e1\",\n                \"sha256:ea9f9c6034ea2d93d9147818f17c2a0860d41b71c38b9ce4d55f21b6f9165a11\",\n                \"sha256:f645caaf0008bacf349875a974220f1f1da349c5dbe7c4ec93048cdc785a3326\",\n                \"sha256:f8303414c7b03f794347ad062c0516cee0e15f7a612abd0ce1e25caf6ceb47df\",\n                \"sha256:fca62a8301b605b954ad2e9c3666f9d97f63872aa4efcae5492baca2056b74ab\"\n            ],\n            \"markers\": \"python_full_version >= '3.7.0'\",\n            \"version\": \"==3.1.0\"\n        },\n        \"cryptography\": {\n            \"hashes\": [\n                \"sha256:059e348f9a3c1950937e1b5d7ba1f8e968508ab181e75fc32b879452f08356db\",\n                \"sha256:1a5472d40c8f8e91ff7a3d8ac6dfa363d8e3138b961529c996f3e2df0c7a411a\",\n                \"sha256:1a8e6c2de6fbbcc5e14fd27fb24414507cb3333198ea9ab1258d916f00bc3039\",\n                \"sha256:1fee5aacc7367487b4e22484d3c7e547992ed726d14864ee33c0176ae43b0d7c\",\n                \"sha256:5d092fdfedaec4cbbffbf98cddc915ba145313a6fdaab83c6e67f4e6c218e6f3\",\n                \"sha256:5f0ff6e18d13a3de56f609dd1fd11470918f770c6bd5d00d632076c727d35485\",\n                \"sha256:7bfc55a5eae8b86a287747053140ba221afc65eb06207bedf6e019b8934b477c\",\n                \"sha256:7fa01527046ca5facdf973eef2535a27fec4cb651e4daec4d043ef63f6ecd4ca\",\n                \"sha256:8dde71c4169ec5ccc1087bb7521d54251c016f126f922ab2dfe6649170a3b8c5\",\n                \"sha256:8f4ab7021127a9b4323537300a2acfb450124b2def3756f64dc3a3d2160ee4b5\",\n                \"sha256:948224d76c4b6457349d47c0c98657557f429b4e93057cf5a2f71d603e2fc3a3\",\n                \"sha256:9a6c7a3c87d595608a39980ebaa04d5a37f94024c9f24eb7d10262b92f739ddb\",\n                \"sha256:b46e37db3cc267b4dea1f56da7346c9727e1209aa98487179ee8ebed09d21e43\",\n                \"sha256:b4ceb5324b998ce2003bc17d519080b4ec8d5b7b70794cbd2836101406a9be31\",\n                \"sha256:cb33ccf15e89f7ed89b235cff9d49e2e62c6c981a6061c9c8bb47ed7951190bc\",\n                \"sha256:d198820aba55660b4d74f7b5fd1f17db3aa5eb3e6893b0a41b75e84e4f9e0e4b\",\n                \"sha256:d34579085401d3f49762d2f7d6634d6b6c2ae1242202e860f4d26b046e3a1006\",\n                \"sha256:eb8163f5e549a22888c18b0d53d6bb62a20510060a22fd5a995ec8a05268df8a\",\n                \"sha256:f73bff05db2a3e5974a6fd248af2566134d8981fd7ab012e5dd4ddb1d9a70699\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==41.0.1\"\n        },\n        \"django\": {\n            \"hashes\": [\n                \"sha256:2a6b6fbff5b59dd07bef10bcb019bee2ea97a30b2a656d51346596724324badf\",\n                \"sha256:672b3fa81e1f853bb58be1b51754108ab4ffa12a77c06db86aa8df9ed0c46fe5\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==4.2.2\"\n\n        },\n        \"django-cors-headers\": {\n            \"hashes\": [\n                \"sha256:a971cd4c75b29974068cc36b5c595698822f1e0edd5f1b32ea42ea37326ad4aa\",\n                \"sha256:e3cbd247a1a835da4cf71a70d4214378813ea7e08337778b82cb2c1bc19d28d6\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==4.0.0\"\n\n        },\n        \"django-ninja\": {\n            \"hashes\": [\n                \"sha256:4d8f551778b387be05fb9887113036067ff081bec61ff5250ceddaa02fe5b761\",\n                \"sha256:c80f263495f61471d880f8f7f434fe921c2c36e20823fd38d46c70e7eb3110e7\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.22.1\"\n        },\n        \"fastapi\": {\n            \"hashes\": [\n                \"sha256:71232d47c2787446991c81c41c249f8a16238d52d779c0e6b43927d3773dbe3c\",\n                \"sha256:b8e11fe81e81eab4e1504209917338e0b80f783878a42c2b99467e5e1019a1e9\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.96.0\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4\",\n                \"sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==3.4\"\n        },\n        \"jwt\": {\n            \"hashes\": [\n                \"sha256:61c9170f92e736b530655e75374681d4fcca9cfa8763ab42be57353b2b203494\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.3.1\"\n        },\n        \"pdfminer.six\": {\n            \"hashes\": [\n                \"sha256:1eaddd712d5b2732f8ac8486824533514f8ba12a0787b3d5fe1e686cd826532d\",\n                \"sha256:8448ab7b939d18b64820478ecac5394f482d7a79f5f7eaa7703c6c959c175e1d\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==20221105\"\n        },\n        \"pdfplumber\": {\n            \"hashes\": [\n                \"sha256:a43a213e125ed72b2358c0d3428f9b72f83939109ec33b77ef9325eeab9846f0\",\n                \"sha256:b396f2919670eb863124f649a907dc846c8653bbb6ba8024fe274952de121077\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.9.0\"\n        },\n        \"pillow\": {\n            \"hashes\": [\n                \"sha256:07999f5834bdc404c442146942a2ecadd1cb6292f5229f4ed3b31e0a108746b1\",\n                \"sha256:0852ddb76d85f127c135b6dd1f0bb88dbb9ee990d2cd9aa9e28526c93e794fba\",\n                \"sha256:1781a624c229cb35a2ac31cc4a77e28cafc8900733a864870c49bfeedacd106a\",\n                \"sha256:1e7723bd90ef94eda669a3c2c19d549874dd5badaeefabefd26053304abe5799\",\n                \"sha256:229e2c79c00e85989a34b5981a2b67aa079fd08c903f0aaead522a1d68d79e51\",\n                \"sha256:22baf0c3cf0c7f26e82d6e1adf118027afb325e703922c8dfc1d5d0156bb2eeb\",\n                \"sha256:252a03f1bdddce077eff2354c3861bf437c892fb1832f75ce813ee94347aa9b5\",\n                \"sha256:2dfaaf10b6172697b9bceb9a3bd7b951819d1ca339a5ef294d1f1ac6d7f63270\",\n                \"sha256:322724c0032af6692456cd6ed554bb85f8149214d97398bb80613b04e33769f6\",\n                \"sha256:35f6e77122a0c0762268216315bf239cf52b88865bba522999dc38f1c52b9b47\",\n                \"sha256:375f6e5ee9620a271acb6820b3d1e94ffa8e741c0601db4c0c4d3cb0a9c224bf\",\n                \"sha256:3ded42b9ad70e5f1754fb7c2e2d6465a9c842e41d178f262e08b8c85ed8a1d8e\",\n                \"sha256:432b975c009cf649420615388561c0ce7cc31ce9b2e374db659ee4f7d57a1f8b\",\n                \"sha256:482877592e927fd263028c105b36272398e3e1be3269efda09f6ba21fd83ec66\",\n                \"sha256:489f8389261e5ed43ac8ff7b453162af39c3e8abd730af8363587ba64bb2e865\",\n                \"sha256:54f7102ad31a3de5666827526e248c3530b3a33539dbda27c6843d19d72644ec\",\n                \"sha256:560737e70cb9c6255d6dcba3de6578a9e2ec4b573659943a5e7e4af13f298f5c\",\n                \"sha256:5671583eab84af046a397d6d0ba25343c00cd50bce03787948e0fff01d4fd9b1\",\n                \"sha256:5ba1b81ee69573fe7124881762bb4cd2e4b6ed9dd28c9c60a632902fe8db8b38\",\n                \"sha256:5d4ebf8e1db4441a55c509c4baa7a0587a0210f7cd25fcfe74dbbce7a4bd1906\",\n                \"sha256:60037a8db8750e474af7ffc9faa9b5859e6c6d0a50e55c45576bf28be7419705\",\n                \"sha256:608488bdcbdb4ba7837461442b90ea6f3079397ddc968c31265c1e056964f1ef\",\n                \"sha256:6608ff3bf781eee0cd14d0901a2b9cc3d3834516532e3bd673a0a204dc8615fc\",\n                \"sha256:662da1f3f89a302cc22faa9f14a262c2e3951f9dbc9617609a47521c69dd9f8f\",\n                \"sha256:7002d0797a3e4193c7cdee3198d7c14f92c0836d6b4a3f3046a64bd1ce8df2bf\",\n                \"sha256:763782b2e03e45e2c77d7779875f4432e25121ef002a41829d8868700d119392\",\n                \"sha256:77165c4a5e7d5a284f10a6efaa39a0ae8ba839da344f20b111d62cc932fa4e5d\",\n                \"sha256:7c9af5a3b406a50e313467e3565fc99929717f780164fe6fbb7704edba0cebbe\",\n                \"sha256:7ec6f6ce99dab90b52da21cf0dc519e21095e332ff3b399a357c187b1a5eee32\",\n                \"sha256:833b86a98e0ede388fa29363159c9b1a294b0905b5128baf01db683672f230f5\",\n                \"sha256:84a6f19ce086c1bf894644b43cd129702f781ba5751ca8572f08aa40ef0ab7b7\",\n                \"sha256:8507eda3cd0608a1f94f58c64817e83ec12fa93a9436938b191b80d9e4c0fc44\",\n                \"sha256:85ec677246533e27770b0de5cf0f9d6e4ec0c212a1f89dfc941b64b21226009d\",\n                \"sha256:8aca1152d93dcc27dc55395604dcfc55bed5f25ef4c98716a928bacba90d33a3\",\n                \"sha256:8d935f924bbab8f0a9a28404422da8af4904e36d5c33fc6f677e4c4485515625\",\n                \"sha256:8f36397bf3f7d7c6a3abdea815ecf6fd14e7fcd4418ab24bae01008d8d8ca15e\",\n                \"sha256:91ec6fe47b5eb5a9968c79ad9ed78c342b1f97a091677ba0e012701add857829\",\n                \"sha256:965e4a05ef364e7b973dd17fc765f42233415974d773e82144c9bbaaaea5d089\",\n                \"sha256:96e88745a55b88a7c64fa49bceff363a1a27d9a64e04019c2281049444a571e3\",\n                \"sha256:99eb6cafb6ba90e436684e08dad8be1637efb71c4f2180ee6b8f940739406e78\",\n                \"sha256:9adf58f5d64e474bed00d69bcd86ec4bcaa4123bfa70a65ce72e424bfb88ed96\",\n                \"sha256:9b1af95c3a967bf1da94f253e56b6286b50af23392a886720f563c547e48e964\",\n                \"sha256:a0aa9417994d91301056f3d0038af1199eb7adc86e646a36b9e050b06f526597\",\n                \"sha256:a0f9bb6c80e6efcde93ffc51256d5cfb2155ff8f78292f074f60f9e70b942d99\",\n                \"sha256:a127ae76092974abfbfa38ca2d12cbeddcdeac0fb71f9627cc1135bedaf9d51a\",\n                \"sha256:aaf305d6d40bd9632198c766fb64f0c1a83ca5b667f16c1e79e1661ab5060140\",\n                \"sha256:aca1c196f407ec7cf04dcbb15d19a43c507a81f7ffc45b690899d6a76ac9fda7\",\n                \"sha256:ace6ca218308447b9077c14ea4ef381ba0b67ee78d64046b3f19cf4e1139ad16\",\n                \"sha256:b416f03d37d27290cb93597335a2f85ed446731200705b22bb927405320de903\",\n                \"sha256:bf548479d336726d7a0eceb6e767e179fbde37833ae42794602631a070d630f1\",\n                \"sha256:c1170d6b195555644f0616fd6ed929dfcf6333b8675fcca044ae5ab110ded296\",\n                \"sha256:c380b27d041209b849ed246b111b7c166ba36d7933ec6e41175fd15ab9eb1572\",\n                \"sha256:c446d2245ba29820d405315083d55299a796695d747efceb5717a8b450324115\",\n                \"sha256:c830a02caeb789633863b466b9de10c015bded434deb3ec87c768e53752ad22a\",\n                \"sha256:cb841572862f629b99725ebaec3287fc6d275be9b14443ea746c1dd325053cbd\",\n                \"sha256:cfa4561277f677ecf651e2b22dc43e8f5368b74a25a8f7d1d4a3a243e573f2d4\",\n                \"sha256:cfcc2c53c06f2ccb8976fb5c71d448bdd0a07d26d8e07e321c103416444c7ad1\",\n                \"sha256:d3c6b54e304c60c4181da1c9dadf83e4a54fd266a99c70ba646a9baa626819eb\",\n                \"sha256:d3d403753c9d5adc04d4694d35cf0391f0f3d57c8e0030aac09d7678fa8030aa\",\n                \"sha256:d9c206c29b46cfd343ea7cdfe1232443072bbb270d6a46f59c259460db76779a\",\n                \"sha256:e49eb4e95ff6fd7c0c402508894b1ef0e01b99a44320ba7d8ecbabefddcc5569\",\n                \"sha256:f8286396b351785801a976b1e85ea88e937712ee2c3ac653710a4a57a8da5d9c\",\n                \"sha256:f8fc330c3370a81bbf3f88557097d1ea26cd8b019d6433aa59f71195f5ddebbf\",\n                \"sha256:fbd359831c1657d69bb81f0db962905ee05e5e9451913b18b831febfe0519082\",\n                \"sha256:fe7e1c262d3392afcf5071df9afa574544f28eac825284596ac6db56e6d11062\",\n                \"sha256:fed1e1cf6a42577953abbe8e6cf2fe2f566daebde7c34724ec8803c4c0cda579\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==9.5.0\"\n        },\n        \"pycparser\": {\n            \"hashes\": [\n                \"sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9\",\n                \"sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206\"\n            ],\n            \"version\": \"==2.21\"\n        },\n        \"pydantic\": {\n            \"hashes\": [\n                \"sha256:07293ab08e7b4d3c9d7de4949a0ea571f11e4557d19ea24dd3ae0c524c0c334d\",\n                \"sha256:0a2aabdc73c2a5960e87c3ffebca6ccde88665616d1fd6d3db3178ef427b267a\",\n                \"sha256:0da48717dc9495d3a8f215e0d012599db6b8092db02acac5e0d58a65248ec5bc\",\n                \"sha256:128d9453d92e6e81e881dd7e2484e08d8b164da5507f62d06ceecf84bf2e21d3\",\n                \"sha256:2196c06484da2b3fded1ab6dbe182bdabeb09f6318b7fdc412609ee2b564c49a\",\n                \"sha256:2e9aec8627a1a6823fc62fb96480abe3eb10168fd0d859ee3d3b395105ae19a7\",\n                \"sha256:3283b574b01e8dbc982080d8287c968489d25329a463b29a90d4157de4f2baaf\",\n                \"sha256:3c52eb595db83e189419bf337b59154bdcca642ee4b2a09e5d7797e41ace783f\",\n                \"sha256:4b466a23009ff5cdd7076eb56aca537c745ca491293cc38e72bf1e0e00de5b91\",\n                \"sha256:517a681919bf880ce1dac7e5bc0c3af1e58ba118fd774da2ffcd93c5f96eaece\",\n                \"sha256:5f8bbaf4013b9a50e8100333cc4e3fa2f81214033e05ac5aa44fa24a98670a29\",\n                \"sha256:6257bb45ad78abacda13f15bde5886efd6bf549dd71085e64b8dcf9919c38b60\",\n                \"sha256:67195274fd27780f15c4c372f4ba9a5c02dad6d50647b917b6a92bf00b3d301a\",\n                \"sha256:6cafde02f6699ce4ff643417d1a9223716ec25e228ddc3b436fe7e2d25a1f305\",\n                \"sha256:73ef93e5e1d3c8e83f1ff2e7fdd026d9e063c7e089394869a6e2985696693766\",\n                \"sha256:7845b31959468bc5b78d7b95ec52fe5be32b55d0d09983a877cca6aedc51068f\",\n                \"sha256:7847ca62e581e6088d9000f3c497267868ca2fa89432714e21a4fb33a04d52e8\",\n                \"sha256:7e1d5290044f620f80cf1c969c542a5468f3656de47b41aa78100c5baa2b8276\",\n                \"sha256:7ee829b86ce984261d99ff2fd6e88f2230068d96c2a582f29583ed602ef3fc2c\",\n                \"sha256:83fcff3c7df7adff880622a98022626f4f6dbce6639a88a15a3ce0f96466cb60\",\n                \"sha256:939328fd539b8d0edf244327398a667b6b140afd3bf7e347cf9813c736211896\",\n                \"sha256:95c70da2cd3b6ddf3b9645ecaa8d98f3d80c606624b6d245558d202cd23ea3be\",\n                \"sha256:963671eda0b6ba6926d8fc759e3e10335e1dc1b71ff2a43ed2efd6996634dafb\",\n                \"sha256:970b1bdc6243ef663ba5c7e36ac9ab1f2bfecb8ad297c9824b542d41a750b298\",\n                \"sha256:9863b9420d99dfa9c064042304868e8ba08e89081428a1c471858aa2af6f57c4\",\n                \"sha256:ad428e92ab68798d9326bb3e5515bc927444a3d71a93b4a2ca02a8a5d795c572\",\n                \"sha256:b48d3d634bca23b172f47f2335c617d3fcb4b3ba18481c96b7943a4c634f5c8d\",\n                \"sha256:b9cd67fb763248cbe38f0593cd8611bfe4b8ad82acb3bdf2b0898c23415a1f82\",\n                \"sha256:d111a21bbbfd85c17248130deac02bbd9b5e20b303338e0dbe0faa78330e37e0\",\n                \"sha256:e1aa5c2410769ca28aa9a7841b80d9d9a1c5f223928ca8bec7e7c9a34d26b1d4\",\n                \"sha256:e692dec4a40bfb40ca530e07805b1208c1de071a18d26af4a2a0d79015b352ca\",\n                \"sha256:e7c9900b43ac14110efa977be3da28931ffc74c27e96ee89fbcaaf0b0fe338e1\",\n                \"sha256:eec39224b2b2e861259d6f3c8b6290d4e0fbdce147adb797484a42278a1a486f\",\n                \"sha256:f0b7628fb8efe60fe66fd4adadd7ad2304014770cdc1f4934db41fe46cc8825f\",\n                \"sha256:f50e1764ce9353be67267e7fd0da08349397c7db17a562ad036aa7c8f4adfdb6\",\n                \"sha256:fab81a92f42d6d525dd47ced310b0c3e10c416bbfae5d59523e63ea22f82b31e\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==1.10.9\"\n        },\n        \"pyjwt\": {\n            \"hashes\": [\n                \"sha256:ba2b425b15ad5ef12f200dc67dd56af4e26de2331f965c5439994dad075876e1\",\n                \"sha256:bd6ca4a3c4285c1a2d4349e5a035fdf8fb94e04ccd0fcbe6ba289dae9cc3e074\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.7.0\"\n        },\n        \"sniffio\": {\n            \"hashes\": [\n                \"sha256:e60305c5e5d314f5389259b7f22aaa33d8f7dee49763119234af3755c55b9101\",\n                \"sha256:eecefdce1e5bbfb7ad2eeaabf7c1eeb404d7757c379bd1f7e5cce9d8bf425384\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==1.3.0\"\n        },\n        \"sqlparse\": {\n            \"hashes\": [\n                \"sha256:5430a4fe2ac7d0f93e66f1efc6e1338a41884b7ddf2a350cedd20ccc4d9d28f3\",\n                \"sha256:d446183e84b8349fa3061f0fe7f06ca94ba65b426946ffebe6e3e8295332420c\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==0.4.4\"\n        },\n        \"starlette\": {\n            \"hashes\": [\n                \"sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75\",\n                \"sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==0.27.0\"\n        },\n        \"typing-extensions\": {\n            \"hashes\": [\n                \"sha256:88a4153d8505aabbb4e13aacb7c486c2b4a33ca3b3f807914a9b4c844c471c26\",\n                \"sha256:d91d5919357fe7f681a9f2b5b4cb2a5f1ef0a1e9f59c4d8ff0d3491e05c0ffd5\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==4.6.3\"\n        },\n        \"tzdata\": {\n            \"hashes\": [\n                \"sha256:11ef1e08e54acb0d4f95bdb1be05da659673de4acbd21bf9c69e94cc5e907a3a\",\n                \"sha256:7e65763eef3120314099b6939b5546db7adce1e7d6f2e179e3df563c70511eda\"\n            ],\n            \"markers\": \"sys_platform == 'win32'\",\n            \"version\": \"==2023.3\"\n        },\n        \"wand\": {\n            \"hashes\": [\n                \"sha256:1b77e25439ace57f665d1ccc6cff2766fad0834005b89ae3e7aaf3ba12b124b0\",\n                \"sha256:b661700da9f8f1e931e52726e4fc643a565b9514f5883d41b773e3c37c9fa995\"\n            ],\n            \"version\": \"==0.6.11\"\n        }\n    },\n    \"develop\": {}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../server/Pipfile.lock b/../server/Pipfile.lock
--- a/../server/Pipfile.lock	
+++ b/../server/Pipfile.lock	
@@ -1,9 +1,7 @@
 {
     "_meta": {
         "hash": {
-
-            "sha256": "2c0fbc506de9ab6bf2a4e5841ca150b3a6d01ae6463e12ac9ebd31fbd9cf9a0c"
-
+            "sha256": "476f7a136016ce00c45f4e534174830e4630befbbf309d7bcc26787801ca241a"
         },
         "pipfile-spec": 6,
         "requires": {
@@ -181,7 +179,7 @@
                 "sha256:f8303414c7b03f794347ad062c0516cee0e15f7a612abd0ce1e25caf6ceb47df",
                 "sha256:fca62a8301b605b954ad2e9c3666f9d97f63872aa4efcae5492baca2056b74ab"
             ],
-            "markers": "python_full_version >= '3.7.0'",
+            "markers": "python_version >= '3.7'",
             "version": "==3.1.0"
         },
         "cryptography": {
@@ -216,7 +214,6 @@
             ],
             "index": "pypi",
             "version": "==4.2.2"
-
         },
         "django-cors-headers": {
             "hashes": [
@@ -225,15 +222,22 @@
             ],
             "index": "pypi",
             "version": "==4.0.0"
-
         },
         "django-ninja": {
             "hashes": [
-                "sha256:4d8f551778b387be05fb9887113036067ff081bec61ff5250ceddaa02fe5b761",
-                "sha256:c80f263495f61471d880f8f7f434fe921c2c36e20823fd38d46c70e7eb3110e7"
+                "sha256:913ebde7571d6a6968c9ac0b9e8a24680c46444d44fdd552f8831dbeede1292c",
+                "sha256:c53b098a8190f373ea2605c276a6061d48b2626500a9c6b9916c503e4b4a20eb"
             ],
             "index": "pypi",
-            "version": "==0.22.1"
+            "version": "==0.22.2"
+        },
+        "exceptiongroup": {
+            "hashes": [
+                "sha256:232c37c63e4f682982c8b6459f33a8981039e5fb8756b2074364e5055c498c9e",
+                "sha256:d484c3090ba2889ae2928419117447a14daf3c1231d5e30d0aae34f354f01785"
+            ],
+            "markers": "python_version < '3.11'",
+            "version": "==1.1.1"
         },
         "fastapi": {
             "hashes": [
@@ -432,17 +436,9 @@
                 "sha256:88a4153d8505aabbb4e13aacb7c486c2b4a33ca3b3f807914a9b4c844c471c26",
                 "sha256:d91d5919357fe7f681a9f2b5b4cb2a5f1ef0a1e9f59c4d8ff0d3491e05c0ffd5"
             ],
-            "markers": "python_version >= '3.7'",
+            "markers": "python_version < '3.11'",
             "version": "==4.6.3"
         },
-        "tzdata": {
-            "hashes": [
-                "sha256:11ef1e08e54acb0d4f95bdb1be05da659673de4acbd21bf9c69e94cc5e907a3a",
-                "sha256:7e65763eef3120314099b6939b5546db7adce1e7d6f2e179e3df563c70511eda"
-            ],
-            "markers": "sys_platform == 'win32'",
-            "version": "==2023.3"
-        },
         "wand": {
             "hashes": [
                 "sha256:1b77e25439ace57f665d1ccc6cff2766fad0834005b89ae3e7aaf3ba12b124b0",
Index: src/app/auth/signup/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\n\nimport Index from \"@components/Interactions/Forms/Input\";\nimport { Button } from \"@components/Interactions/Button\";\n\nimport LoginIcon from \"@icons/Login.svg\";\nimport MyRadioGroup from \"@components/Interactions/Forms/RadioGroup\";\n\nconst options = [\n  { value: \"teacher\", label: \"Teacher\" },\n  { value: \"student\", label: \"Student\" },\n];\n\nfunction Register() {\n  // function onSubmit() {\n  //   const res = fetch(\"http://localhost:8000/api/signup\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       username: \"username.current\",\n  //       password: \"password.current\",\n  //       email: \"email.current\",\n  //       name: \"Antoine Maes\",\n  //       phone: \"+330606060606\",\n  //       type: \"Student\",\n  //     }),\n  //   })\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       const status = data.status;\n  //       console.log(status);\n  //     })\n  //     .catch((error) => {\n  //       // Gérer les erreurs de la requête ici\n  //       console.error(error);\n  //     });\n  // }\n\n  return (\n    <form\n      className={\"flex flex-col gap-4 max-w-[480px]\"}\n      onSubmit={(e) => {\n        e.preventDefault();\n        console.log(\n          Object.fromEntries(new FormData(e.currentTarget).entries())\n        );\n      }}\n    >\n      <MyRadioGroup\n        defaultValue={options[0].value}\n        options={options}\n        name={\"type\"}\n        label={\"I'm a :\"}\n      />\n      <Index placeholder=\"Full name\" name={\"name\"} />\n      <Index placeholder=\"Email\" name={\"email\"} />\n      <Index placeholder=\"Password\" name={\"password\"} />\n      <Index placeholder=\"Confirm password\" name={\"confirm_password\"} />\n\n      <Button responsive className={\"mt-4\"} type={\"submit\"}>\n        <span>Sign Up</span>\n        <LoginIcon className={\"w-5\"} />\n      </Button>\n    </form>\n  );\n}\n\nexport default Register;\n
===================================================================
diff --git a/src/app/auth/signup/page.tsx b/src/app/auth/signup/page.tsx
--- a/src/app/auth/signup/page.tsx	
+++ b/src/app/auth/signup/page.tsx	
@@ -1,52 +1,52 @@
 "use client";
 
-import Index from "@components/Interactions/Forms/Input";
+import Input from "@components/Interactions/Forms/Input";
 import { Button } from "@components/Interactions/Button";
 
 import LoginIcon from "@icons/Login.svg";
 import MyRadioGroup from "@components/Interactions/Forms/RadioGroup";
+import { FormEvent } from "react";
 
 const options = [
-  { value: "teacher", label: "Teacher" },
   { value: "student", label: "Student" },
+  { value: "teacher", label: "Teacher" },
 ];
 
 function Register() {
-  // function onSubmit() {
-  //   const res = fetch("http://localhost:8000/api/signup", {
-  //     method: "POST",
-  //     headers: {
-  //       "Content-Type": "application/json",
-  //     },
-  //     body: JSON.stringify({
-  //       username: "username.current",
-  //       password: "password.current",
-  //       email: "email.current",
-  //       name: "Antoine Maes",
-  //       phone: "+330606060606",
-  //       type: "Student",
-  //     }),
-  //   })
-  //     .then((response) => response.json())
-  //     .then((data) => {
-  //       const status = data.status;
-  //       console.log(status);
-  //     })
-  //     .catch((error) => {
-  //       // Gérer les erreurs de la requête ici
-  //       console.error(error);
-  //     });
-  // }
+  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
+    e.preventDefault();
+
+    const formData = new FormData(e.currentTarget);
+
+    fetch("http://localhost:8000/api/signup", {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify({
+        username: "username.current",
+        password: formData.get("password"),
+        email: formData.get("email"),
+        name: formData.get("name"),
+        phone: "+330606060606",
+        type: formData.get("type"),
+      }),
+    })
+      .then((response) => response.json())
+      .then((data) => {
+        const status = data.status;
+        console.log(status);
+      })
+      .catch((error) => {
+        // Gérer les erreurs de la requête ici
+        console.error(error);
+      });
+  };
 
   return (
     <form
       className={"flex flex-col gap-4 max-w-[480px]"}
-      onSubmit={(e) => {
-        e.preventDefault();
-        console.log(
-          Object.fromEntries(new FormData(e.currentTarget).entries())
-        );
-      }}
+      onSubmit={handleSubmit}
     >
       <MyRadioGroup
         defaultValue={options[0].value}
@@ -54,10 +54,10 @@
         name={"type"}
         label={"I'm a :"}
       />
-      <Index placeholder="Full name" name={"name"} />
-      <Index placeholder="Email" name={"email"} />
-      <Index placeholder="Password" name={"password"} />
-      <Index placeholder="Confirm password" name={"confirm_password"} />
+      <Input placeholder="Full name" name={"name"} />
+      <Input placeholder="Email" name={"email"} />
+      <Input placeholder="Password" name={"password"} />
+      <Input placeholder="Confirm password" name={"confirm_password"} />
 
       <Button responsive className={"mt-4"} type={"submit"}>
         <span>Sign Up</span>
